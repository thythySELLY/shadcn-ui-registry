{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-textarea-field",
  "type": "registry:block",
  "title": "Multi Textarea Field",
  "description": "A multiple textarea component with validation",
  "files": [
    {
      "path": "registry/multi-textarea-field/component.tsx",
      "content": "import { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport interface TabDefinition {\n  id: string;\n  label: string;\n  icon?: string;\n  placeholder?: string;\n}\n\ninterface MultiTextareaProps<T extends string> {\n  value: Partial<Record<T, string>>;\n  onChange: (value: Partial<Record<T, string>>) => void;\n  tabs: TabDefinition[];\n  errorMessages?: {\n    required?: string;\n    minLength?: string;\n    maxLength?: string;\n  };\n  disabled?: boolean;\n  required?: boolean;\n}\n\nexport function MultiTextarea<T extends string>({\n  value,\n  onChange,\n  tabs,\n  disabled,\n  required,\n}: MultiTextareaProps<T>) {\n  const [activeTab, setActiveTab] = useState<T>(tabs[0].id as T);\n\n  const handleChange = (tabId: T, text: string) => {\n    onChange({ ...value, [tabId]: text });\n  };\n\n  return (\n    <Tabs\n      defaultValue={tabs[0].id}\n      value={activeTab}\n      onValueChange={(val: T) => setActiveTab(val)}\n      className=\"w-full\"\n    >\n      <TabsList className={`grid grid-cols-${tabs.length}`}>\n        {tabs.map((tab) => (\n          <TabsTrigger\n            key={tab.id}\n            value={tab.id}\n            className=\"flex items-center gap-1\"\n            disabled={disabled}\n          >\n            {tab.icon && <span>{tab.icon}</span>}\n            <span>{tab.label}</span>\n            {required && <span className=\"ml-1 text-red-500\">*</span>}\n          </TabsTrigger>\n        ))}\n      </TabsList>\n\n      {tabs.map((tab) => (\n        <TabsContent key={tab.id} value={tab.id} className=\"mt-0\">\n          <Textarea\n            value={value[tab.id as T] || \"\"}\n            onChange={(e) => handleChange(tab.id as T, e.target.value)}\n            placeholder={tab.placeholder || `Enter ${tab.label}`}\n            className=\"!focus-visible:ring-[1px] !focus-visible:ring-primary !text-foreground\"\n            disabled={disabled}\n          />\n        </TabsContent>\n      ))}\n    </Tabs>\n  );\n}\n",
      "type": "registry:component",
      "target": "src/registry-components/multi-textarea-field/component.tsx"
    },
    {
      "path": "registry/multi-textarea-field/field.tsx",
      "content": "import {\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { MultiTextarea, TabDefinition } from \"./component\";\nimport { createMultiTextareaSchema } from \"./schema\";\n\ninterface MultiTextareaFieldProps {\n  name: string;\n  tabs: TabDefinition[];\n  label?: string;\n  disabled?: boolean;\n  required?: boolean;\n  errorMessages?: {\n    required?: string;\n    minLength?: string;\n    maxLength?: string;\n  };\n}\n\nexport function MultiTextareaField({\n  name,\n  tabs,\n  label,\n  disabled,\n  required,\n  errorMessages,\n}: MultiTextareaFieldProps) {\n  const form = useFormContext();\n  const schema = createMultiTextareaSchema({\n    fields: tabs.map((tab) => tab.id),\n    required,\n    minLength: 1,\n    maxLength: 1000,\n    errorMessages,\n  });\n  return (\n    <FormItem>\n      {label && (\n        <FormLabel className=\"!text-foreground\">\n          {label} {required && <span className=\"text-red-500\">*</span>}\n        </FormLabel>\n      )}\n      <Controller\n        name={name}\n        control={form.control}\n        rules={{\n          validate: (val) => {\n            const result = schema.safeParse(val);\n            return result.success || result.error.errors[0]?.message;\n          },\n        }}\n        render={({ field }) => (\n          <FormControl>\n            <MultiTextarea\n              value={field.value}\n              onChange={field.onChange}\n              tabs={tabs}\n              errorMessages={errorMessages}\n              disabled={disabled}\n              required={required}\n            />\n          </FormControl>\n        )}\n      />\n      <FormMessage />\n    </FormItem>\n  );\n}\n",
      "type": "registry:component",
      "target": "src/registry-components/multi-textarea-field/field.tsx"
    },
    {
      "path": "registry/multi-textarea-field/schema.ts",
      "content": "import * as z from \"zod\";\n\nexport const createMultiTextareaSchema = <T extends string>({\n  fields,\n  required = false,\n  minLength,\n  maxLength,\n  errorMessages,\n}: {\n  fields: T[];\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  errorMessages?: {\n    required?: string;\n    minLength?: string;\n    maxLength?: string;\n  };\n}) => {\n  const textSchema = z\n    .string()\n    .transform((val) => val || undefined)\n    .pipe(\n      z\n        .string()\n        .min(minLength ?? 0, errorMessages?.minLength ?? \"Minimum length is 0\")\n        .max(\n          maxLength ?? 1000,\n          errorMessages?.maxLength ?? \"Maximum length is 1000\"\n        )\n        .optional()\n    );\n\n  return z.object(\n    fields.reduce(\n      (acc, field) => ({\n        ...acc,\n        [field]: required\n          ? textSchema\n          : textSchema.optional().refine((val) => {\n              if (required && !val) {\n                return errorMessages?.required;\n              }\n            }),\n      }),\n      {} as Record<T, z.ZodType>\n    )\n  );\n};\n\nexport type MultiTextareaSchema<T extends string> = ReturnType<\n  typeof createMultiTextareaSchema<T>\n>;\n",
      "type": "registry:hook",
      "target": "src/registry-components/multi-textarea-field/schema.ts"
    }
  ]
}