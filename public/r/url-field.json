{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "url-field",
  "type": "registry:block",
  "title": "URL Field",
  "description": "A URL input component with validation",
  "files": [
    {
      "path": "registry/url-field/component.tsx",
      "content": "import React from \"react\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface URLInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  error?: string;\n}\n\nexport const URLInput = React.forwardRef<HTMLInputElement, URLInputProps>(\n  ({ error, className = \"\", ...props }, ref) => {\n    return (\n      <Input\n        type=\"url\"\n        className={`${className} ${error ? \"border-red-500\" : \"\"}`}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n\nURLInput.displayName = \"URLInput\";\n",
      "type": "registry:component",
      "target": "src/registry-components/url-field/component.tsx"
    },
    {
      "path": "registry/url-field/field.tsx",
      "content": "import React from \"react\";\nimport {\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useFormContext } from \"react-hook-form\";\nimport { URLInput } from \"./component\";\nimport { createURLSchema } from \"./schema\";\n\ninterface URLFieldProps {\n  name: string;\n  required?: boolean;\n  errorMessages?: {\n    required?: string;\n    invalid?: string;\n  };\n  label?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport const URLField: React.FC<URLFieldProps> = ({\n  name,\n  label,\n  required = false,\n  errorMessages,\n  placeholder = \"Enter URL (e.g., https://example.com)\",\n  disabled = false,\n  className = \"\",\n}) => {\n  const form = useFormContext();\n\n  const schema = createURLSchema({\n    required,\n    errorMessages,\n  });\n\n  return (\n    <FormField\n      control={form.control}\n      name={name}\n      rules={{\n        validate: (val) => {\n          const result = schema.safeParse(val);\n          return result.success || result.error.errors[0]?.message;\n        },\n      }}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel className=\"!text-foreground\">\n            {label} {required && <span className=\"text-red-500\">*</span>}\n          </FormLabel>\n          <FormControl>\n            <URLInput\n              {...field}\n              placeholder={placeholder}\n              disabled={disabled}\n              className={className}\n            />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n",
      "type": "registry:component",
      "target": "src/registry-components/url-field/field.tsx"
    },
    {
      "path": "registry/url-field/schema.ts",
      "content": "import { z } from \"zod\";\n\ninterface URLSchemaOptions {\n  required?: boolean;\n  errorMessages?: {\n    required?: string;\n    invalid?: string;\n  };\n}\n\nexport const createURLSchema = ({\n  required = true,\n  errorMessages = {},\n}: URLSchemaOptions = {}) => {\n  const urlPattern = /^https?:\\/\\/.+\\..+/;\n\n  return z\n    .string()\n    .trim()\n    .superRefine((val, ctx) => {\n      if (required && !val) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: errorMessages.required ?? \"URL is required\",\n        });\n      }\n      if (val && !urlPattern.test(val)) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: errorMessages.invalid ?? \"Invalid URL\",\n        });\n      }\n    });\n};\n\nexport type URLSchema = ReturnType<typeof createURLSchema>;\n",
      "type": "registry:hook",
      "target": "src/registry-components/url-field/schema.ts"
    }
  ]
}