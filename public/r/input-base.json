{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-base",
  "type": "registry:ui",
  "title": "Input Base",
  "description": "Base input component used by other field components",
  "files": [
    {
      "path": "registry/input-base.tsx",
      "content": "\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nexport type InputBaseContextProps = Pick<\n  InputBaseProps,\n  \"autoFocus\" | \"disabled\"\n> & {\n  controlRef: React.RefObject<HTMLElement | null>;\n  onFocusedChange: (focused: boolean) => void;\n};\n\nconst InputBaseContext = React.createContext<InputBaseContextProps>({\n  autoFocus: false,\n  controlRef: { current: null },\n  disabled: false,\n  onFocusedChange: () => {},\n});\n\nfunction useInputBase() {\n  const context = React.useContext(InputBaseContext);\n  if (!context) {\n    throw new Error(\"useInputBase must be used within a <InputBase />.\");\n  }\n\n  return context;\n}\n\nexport interface InputBaseProps\n  extends React.ComponentProps<typeof Primitive.div> {\n  autoFocus?: boolean;\n  disabled?: boolean;\n  error?: boolean;\n}\n\nfunction InputBase({\n  autoFocus,\n  disabled,\n  className,\n  onClick,\n  error,\n  ...props\n}: InputBaseProps) {\n  const [focused, setFocused] = React.useState(false);\n  const controlRef = React.useRef<HTMLElement>(null);\n\n  return (\n    <InputBaseContext.Provider\n      value={{\n        autoFocus,\n        controlRef,\n        disabled,\n        onFocusedChange: setFocused,\n      }}\n    >\n      <Primitive.div\n        data-slot=\"input-base\"\n        // Based on MUI's <InputBase /> implementation.\n        // https://github.com/mui/material-ui/blob/master/packages/mui-material/src/InputBase/InputBase.js#L458~L460\n        onClick={composeEventHandlers(onClick, (event) => {\n          if (controlRef.current && event.currentTarget === event.target) {\n            controlRef.current.focus();\n          }\n        })}\n        className={cn(\n          \"border-input selection:bg-primary selection:text-primary-foreground dark:bg-input/30 flex min-h-9 cursor-text items-center gap-2 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none md:text-sm\",\n          disabled && \"pointer-events-none cursor-not-allowed opacity-50\",\n          focused && \"\",\n          error &&\n            \"ring-destructive/20 dark:ring-destructive/40 border-destructive\",\n          className\n        )}\n        {...props}\n      />\n    </InputBaseContext.Provider>\n  );\n}\n\nfunction InputBaseFlexWrapper({\n  className,\n  ...props\n}: React.ComponentProps<typeof Primitive.div>) {\n  return (\n    <Primitive.div\n      data-slot=\"input-base-flex-wrapper\"\n      className={cn(\"flex flex-1 flex-wrap\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction InputBaseControl({\n  ref,\n  onFocus,\n  onBlur,\n  ...props\n}: React.ComponentProps<typeof Slot>) {\n  const { controlRef, autoFocus, disabled, onFocusedChange } = useInputBase();\n\n  const composedRefs = useComposedRefs(controlRef, ref);\n\n  return (\n    <Slot\n      data-slot=\"input-base-control\"\n      ref={composedRefs}\n      autoFocus={autoFocus}\n      onFocus={composeEventHandlers(onFocus, () => onFocusedChange(true))}\n      onBlur={composeEventHandlers(onBlur, () => onFocusedChange(false))}\n      {...{ disabled }}\n      {...props}\n    />\n  );\n}\n\nexport interface InputBaseAdornmentProps extends React.ComponentProps<\"div\"> {\n  asChild?: boolean;\n}\n\nfunction InputBaseAdornment({\n  className,\n  asChild,\n  children,\n  ...props\n}: InputBaseAdornmentProps) {\n  const Comp = asChild ? Slot : typeof children === \"string\" ? \"p\" : \"div\";\n\n  return (\n    <Comp\n      data-slot=\"input-base-adornment\"\n      className={cn(\n        \"text-muted-foreground flex items-center [&_svg:not([class*='size-'])]:size-4\",\n        \"[&:not(:has(button))]:pointer-events-none\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nfunction InputBaseAdornmentButton({\n  type = \"button\",\n  variant = \"ghost\",\n  size = \"icon\",\n  disabled: disabledProp,\n  className,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { disabled } = useInputBase();\n\n  return (\n    <Button\n      data-slot=\"input-base-adornment-button\"\n      type={type}\n      variant={variant}\n      size={size}\n      disabled={disabled || disabledProp}\n      className={cn(\"size-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction InputBaseInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  return (\n    <Primitive.input\n      data-slot=\"input-base-input\"\n      className={cn(\n        \"placeholder:text-muted-foreground file:text-foreground w-full flex-1 bg-transparent file:border-0 file:bg-transparent file:text-sm file:font-medium focus:outline-none disabled:pointer-events-none\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  InputBase,\n  InputBaseFlexWrapper,\n  InputBaseControl,\n  InputBaseAdornment,\n  InputBaseAdornmentButton,\n  InputBaseInput,\n  useInputBase,\n};\n",
      "type": "registry:ui",
      "target": "src/registry-components/input-base.tsx"
    }
  ]
}