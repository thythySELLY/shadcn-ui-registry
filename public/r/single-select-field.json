{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "single-select-field",
  "type": "registry:block",
  "title": "Single Select Field",
  "description": "A single selection component with validation",
  "files": [
    {
      "path": "registry/single-select-field/component.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n} from \"@/components/ui/select\";\n\nexport interface Option {\n  value: string;\n  name: string;\n  disabled?: boolean;\n  description?: string;\n  icon?: React.ReactNode;\n}\n\nexport interface SingleSelectProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"value\" | \"onChange\"> {\n  value: string;\n  onChange: (value: string) => void;\n  options: Option[];\n  placeholder?: string;\n  disabled?: boolean;\n  className?: string;\n  triggerClassName?: string;\n  contentClassName?: string;\n  itemClassName?: string;\n  variant?: \"default\" | \"outline\" | \"ghost\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  clearable?: boolean;\n  loading?: boolean;\n  emptyMessage?: string;\n  customTriggerRender?: (\n    selectedOption: Option | null,\n    placeholder?: string\n  ) => React.ReactNode;\n  customItemRender?: (option: Option, isSelected: boolean) => React.ReactNode;\n}\n\nconst sizeVariants = {\n  sm: {\n    trigger: \"h-8 px-2 text-xs\",\n    content: \"text-xs\",\n    item: \"px-2 py-1 text-xs\",\n    icon: \"h-3 w-3\",\n  },\n  md: {\n    trigger: \"h-10 px-3 text-sm\",\n    content: \"text-sm\",\n    item: \"px-2 py-1.5 text-sm\",\n    icon: \"h-4 w-4\",\n  },\n  lg: {\n    trigger: \"h-12 px-4 text-base\",\n    content: \"text-base\",\n    item: \"px-3 py-2 text-base\",\n    icon: \"h-5 w-5\",\n  },\n};\n\nconst variantStyles = {\n  default: {\n    trigger:\n      \"border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n  },\n  outline: {\n    trigger:\n      \"border-2 border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n  },\n  ghost: {\n    trigger:\n      \"border-0 bg-transparent hover:bg-accent hover:text-accent-foreground\",\n  },\n};\n\nexport function SingleSelect({\n  value,\n  onChange,\n  options,\n  placeholder = \"Select an option...\",\n  disabled = false,\n  className,\n  triggerClassName,\n  contentClassName,\n  itemClassName,\n  variant = \"default\",\n  size = \"md\",\n  clearable = false,\n  loading = false,\n  emptyMessage = \"No options available\",\n  customTriggerRender,\n  customItemRender,\n}: SingleSelectProps) {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const sizeClasses = sizeVariants[size];\n  const variantClasses = variantStyles[variant];\n\n  const selectedOption = React.useMemo(\n    () => options.find((option) => option.value === value) || null,\n    [options, value]\n  );\n\n  const handleClear = React.useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      onChange(\"\");\n    },\n    [onChange]\n  );\n\n  const renderTriggerContent = React.useCallback(\n    (selectedOption: Option | null) => {\n      if (customTriggerRender) {\n        return customTriggerRender(selectedOption, placeholder);\n      }\n\n      if (!selectedOption) {\n        return <span className=\"text-muted-foreground\">{placeholder}</span>;\n      }\n\n      return (\n        <div className=\"flex items-center gap-2\">\n          {selectedOption.icon && (\n            <span className=\"flex-shrink-0\">{selectedOption.icon}</span>\n          )}\n          <span className=\"truncate\">{selectedOption.name}</span>\n        </div>\n      );\n    },\n    [customTriggerRender, placeholder]\n  );\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      <Select\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        value={value}\n        onValueChange={onChange}\n        disabled={disabled || loading}\n      >\n        <SelectTrigger\n          className={cn(\n            \"flex items-center justify-between\",\n            sizeClasses.trigger,\n            variantClasses.trigger,\n            triggerClassName\n          )}\n        >\n          <div className=\"flex-1 text-left overflow-hidden text-foreground\">\n            {loading ? (\n              <span className=\"text-muted-foreground\">Loading...</span>\n            ) : (\n              renderTriggerContent(selectedOption)\n            )}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            {clearable && value && !loading && (\n              <X\n                className={cn(\n                  \"cursor-pointer hover:text-destructive\",\n                  sizeClasses.icon\n                )}\n                onClick={handleClear}\n              />\n            )}\n          </div>\n        </SelectTrigger>\n\n        <SelectContent\n          className={cn(\n            \"max-h-60 overflow-auto\",\n            sizeClasses.content,\n            contentClassName\n          )}\n        >\n          {loading ? (\n            <div className=\"text-center py-4 text-muted-foreground\">\n              <div className=\"flex items-center justify-center gap-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n                Loading options...\n              </div>\n            </div>\n          ) : options.length === 0 ? (\n            <div className=\"text-center py-4 text-muted-foreground\">\n              {emptyMessage}\n            </div>\n          ) : (\n            options.map((option, index) => {\n              const isSelected = value === option.value;\n\n              if (customItemRender) {\n                return (\n                  <SelectItem\n                    key={index}\n                    value={option.value}\n                    disabled={option.disabled}\n                    className={cn(\n                      \"text-foreground\",\n                      sizeClasses.item,\n                      itemClassName\n                    )}\n                  >\n                    {customItemRender(option, isSelected)}\n                  </SelectItem>\n                );\n              }\n\n              return (\n                <SelectItem\n                  key={index}\n                  value={option.value}\n                  disabled={option.disabled}\n                  className={cn(\n                    \"cursor-pointer focus:bg-accent focus:text-accent-foreground text-foreground\",\n                    sizeClasses.item,\n                    option.disabled && \"opacity-50 cursor-not-allowed\",\n                    itemClassName\n                  )}\n                >\n                  <div className=\"flex items-center gap-2 w-full\">\n                    {option.icon && (\n                      <span className=\"flex-shrink-0\">{option.icon}</span>\n                    )}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"truncate font-medium\">{option.name}</div>\n                      {option.description && (\n                        <div className=\"text-xs text-muted-foreground truncate mt-0.5\">\n                          {option.description}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </SelectItem>\n              );\n            })\n          )}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "src/registry-components/single-select-field/component.tsx"
    },
    {
      "path": "registry/single-select-field/field.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { type Path, type FieldValues, useFormContext } from \"react-hook-form\";\nimport {\n  FormField,\n  FormItem,\n  FormControl,\n  FormMessage,\n  FormLabel,\n} from \"@/components/ui/form\";\nimport { SingleSelect, type Option } from \"./component\";\nimport { createSingleSelectSchema } from \"./schema\";\n\nexport interface SingleSelectFieldProps<T extends FieldValues>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"form\"> {\n  name: Path<T>;\n  label: string;\n  options: Option[];\n  placeholder?: string;\n  disabled?: boolean;\n  className?: string;\n  triggerClassName?: string;\n  contentClassName?: string;\n  itemClassName?: string;\n  variant?: \"default\" | \"outline\" | \"ghost\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  clearable?: boolean;\n  loading?: boolean;\n  emptyMessage?: string;\n  required?: boolean;\n  customTriggerRender?: (\n    selectedOption: Option | null,\n    placeholder?: string\n  ) => React.ReactNode;\n  customItemRender?: (option: Option, isSelected: boolean) => React.ReactNode;\n  errorMessages?: {\n    required?: string;\n    invalid?: string;\n  };\n}\n\nexport function SingleSelectField<T extends FieldValues>({\n  label,\n  name,\n  options,\n  placeholder,\n  disabled,\n  className,\n  triggerClassName,\n  contentClassName,\n  itemClassName,\n  variant,\n  size,\n  clearable,\n  loading,\n  emptyMessage,\n  required,\n  customTriggerRender,\n  customItemRender,\n  errorMessages,\n}: SingleSelectFieldProps<T>) {\n  const schema = createSingleSelectSchema({\n    required,\n    errorMessages,\n  });\n\n  const form = useFormContext();\n\n  return (\n    <FormField\n      control={form.control}\n      name={name}\n      rules={{\n        validate: (val) => {\n          const result = schema.safeParse(val);\n          return result.success || result.error.errors[0]?.message;\n        },\n      }}\n      render={({ field, formState: { errors } }) => (\n        <FormItem className={className}>\n          <FormLabel className=\"!text-foreground\">\n            {label} {required && <span className=\"text-red-500\">*</span>}\n          </FormLabel>\n          <FormControl>\n            <SingleSelect\n              value={field.value || \"\"}\n              onChange={(value) => field.onChange(value)}\n              options={options}\n              placeholder={placeholder}\n              disabled={disabled}\n              triggerClassName={triggerClassName}\n              contentClassName={contentClassName}\n              itemClassName={itemClassName}\n              variant={variant}\n              size={size}\n              clearable={clearable}\n              loading={loading}\n              emptyMessage={emptyMessage}\n              customTriggerRender={customTriggerRender}\n              customItemRender={customItemRender}\n            />\n          </FormControl>\n          <FormMessage>{errors[name]?.message as string}</FormMessage>\n        </FormItem>\n      )}\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": "src/registry-components/single-select-field/field.tsx"
    },
    {
      "path": "registry/single-select-field/schema.ts",
      "content": "import { z } from \"zod\";\n\ninterface SingleSelectSchemaOptions {\n  required?: boolean;\n  errorMessages?: {\n    required?: string;\n    invalid?: string;\n  };\n}\n\nexport const createSingleSelectSchema = ({\n  required = true,\n  errorMessages = {},\n}: SingleSelectSchemaOptions = {}) => {\n  return z\n    .string({\n      invalid_type_error: errorMessages.invalid ?? \"Invalid selection\",\n    })\n    .nullable()\n    .refine(\n      (val) => {\n        if (!required && val === null) return true;\n        return val !== null && val.length > 0;\n      },\n      {\n        message: errorMessages.required ?? \"Please select an option\",\n      }\n    );\n};\n\nexport type SingleSelectSchema = z.infer<\n  ReturnType<typeof createSingleSelectSchema>\n>;\n",
      "type": "registry:hook",
      "target": "src/registry-components/single-select-field/schema.ts"
    }
  ]
}