{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "general-number-field",
  "type": "registry:block",
  "title": "Number Field",
  "description": "A general number input component with validation",
  "files": [
    {
      "path": "registry/general-number-field/component.tsx",
      "content": "import React from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface GeneralNumberInputProps\n  extends Omit<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    \"prefix\" | \"onChange\"\n  > {\n  prefix?: string;\n  min?: number;\n  max?: number;\n  step?: number;\n  onValueChange?: (value: number | undefined) => void;\n  quickOptions?: {\n    value: number;\n    label: string;\n  }[];\n  quickOptionsClassName?: string;\n}\n\nexport const GeneralNumberInput = React.forwardRef<\n  HTMLInputElement,\n  GeneralNumberInputProps\n>(\n  (\n    {\n      prefix,\n      className,\n      min,\n      max,\n      step,\n      onValueChange,\n      quickOptions,\n      quickOptionsClassName,\n      ...props\n    },\n    ref\n  ) => {\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const value = e.target.value.trim();\n\n      if (value === \"\") {\n        onValueChange?.(undefined);\n        return;\n      }\n\n      const numValue = Number(value);\n      if (isNaN(numValue)) return;\n\n      const isValid =\n        (min === undefined || numValue >= min) &&\n        (max === undefined || numValue <= max);\n\n      if (!isValid) return;\n\n      onValueChange?.(numValue);\n    };\n\n    const handleQuickOptionClick = (value: string | number) => {\n      const numValue = Number(value);\n      if (!isNaN(numValue)) {\n        onValueChange?.(numValue);\n      }\n    };\n\n    return (\n      <div className=\"space-y-2\">\n        <div className=\"relative flex items-center\">\n          {prefix && (\n            <span\n              className=\"absolute left-3 text-foreground\"\n              aria-hidden=\"true\"\n            >\n              {prefix}\n            </span>\n          )}\n          <Input\n            type=\"number\"\n            className={cn(prefix && \"pl-8\", className)}\n            onChange={handleChange}\n            min={min}\n            max={max}\n            step={step}\n            aria-label={props[\"aria-label\"] || \"Number input\"}\n            ref={ref}\n            {...props}\n          />\n        </div>\n\n        {quickOptions && quickOptions.length > 0 && (\n          <div\n            className={cn(\n              \"flex flex-wrap gap-2 cursor-pointer\",\n              quickOptionsClassName\n            )}\n          >\n            {quickOptions.map((option, index) => (\n              <Button\n                key={index}\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleQuickOptionClick(option.value)}\n                type=\"button\"\n                className=\"hover:bg-primary hover:text-primary-foreground cursor-pointer\"\n              >\n                {option.label}\n              </Button>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nGeneralNumberInput.displayName = \"GeneralNumberInput\";\n",
      "type": "registry:component",
      "target": "src/registry-components/general-number-field/component.tsx"
    },
    {
      "path": "registry/general-number-field/field.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport {\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { GeneralNumberInput, GeneralNumberInputProps } from \"./component\";\nimport { generalNumberSchema } from \"./schema\";\n\ninterface GeneralNumberFieldProps extends GeneralNumberInputProps {\n  name: string;\n  label?: string;\n  errorMessage?: {\n    required?: string;\n    invalid?: string;\n    min?: string;\n    max?: string;\n  };\n  quickOptions?: {\n    value: number;\n    label: string;\n  }[];\n}\n\nexport function GeneralNumberField({\n  name,\n  label,\n  errorMessage,\n  required,\n  quickOptions,\n  ...props\n}: GeneralNumberFieldProps) {\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext();\n\n  const schema = generalNumberSchema(\n    props.min,\n    props.max,\n    required,\n    errorMessage\n  );\n\n  function getErrorMessage(errors: any, name: string) {\n    return name\n      .split(\".\")\n      .reduce((acc, key) => (acc ? acc[key] : undefined), errors)?.message;\n  }\n\n  return (\n    <FormItem>\n      {label && (\n        <FormLabel className=\"!text-foreground\">\n          {label} {required && <span className=\"text-red-500\">*</span>}\n        </FormLabel>\n      )}\n      <FormControl>\n        <Controller\n          name={name}\n          control={control}\n          rules={{\n            validate: (val) => {\n              const result = schema.safeParse(val);\n              if (!result.success) {\n                return result.error.errors[0].message;\n              }\n              return true;\n            },\n          }}\n          render={({ field }) => (\n            <GeneralNumberInput\n              {...field}\n              {...props}\n              onValueChange={(value) => field.onChange(value)}\n              quickOptions={quickOptions}\n            />\n          )}\n        />\n      </FormControl>\n      <FormMessage>{getErrorMessage(errors, name)}</FormMessage>\n    </FormItem>\n  );\n}\n",
      "type": "registry:component",
      "target": "src/registry-components/general-number-field/field.tsx"
    },
    {
      "path": "registry/general-number-field/schema.ts",
      "content": "import * as z from \"zod\";\n\nexport const generalNumberSchema = (\n  min?: number,\n  max?: number,\n  required = false,\n  errorMessages?: {\n    required?: string;\n    invalid?: string;\n    min?: string;\n    max?: string;\n  }\n) => {\n  const schema = z\n    .number({\n      invalid_type_error: errorMessages?.invalid ?? \"Invalid number\",\n      required_error: errorMessages?.required ?? \"This field is required\",\n    })\n    .superRefine((val, ctx) => {\n      if (required && val === undefined) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: errorMessages?.required ?? \"This field is required\",\n        });\n      }\n      if (typeof min === \"number\" && val < min) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `Minimum ${min}`,\n        });\n      }\n      if (typeof max === \"number\" && val > max) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `Maximum ${max}`,\n        });\n      }\n    });\n\n  return schema;\n};\n\nexport type GeneralNumberSchema = z.infer<\n  ReturnType<typeof generalNumberSchema>\n>;\n",
      "type": "registry:hook",
      "target": "src/registry-components/general-number-field/schema.ts"
    }
  ]
}