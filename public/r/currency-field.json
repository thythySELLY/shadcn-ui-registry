{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "currency-field",
  "type": "registry:block",
  "title": "Currency Field",
  "description": "A currency input component with validation and formatting",
  "files": [
    {
      "path": "registry/currency-field/component.tsx",
      "content": "import {\n  InputBase,\n  InputBaseAdornment,\n  InputBaseControl,\n  InputBaseInput,\n} from \"@/components/ui/input-base\";\nimport { useMemo } from \"react\";\n\ninterface CurrencyInputProps {\n  value?: string | number;\n  onChange: (val: string) => void;\n  prefix?: React.ReactNode;\n  allowDecimals?: boolean;\n  disabled?: boolean;\n  maxLength?: number;\n  className?: string;\n}\n\nexport const CurrencyInput = ({\n  value,\n  onChange,\n  prefix = \"$\",\n  allowDecimals = true,\n  disabled,\n  maxLength,\n  className,\n}: CurrencyInputProps) => {\n  const displayValue = useMemo(() => {\n    if (value === undefined || value === null) return \"\";\n    const val = typeof value === \"number\" ? value.toString() : value;\n    return val.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }, [value]);\n\n  return (\n    <InputBase className={className}>\n      {prefix && <InputBaseAdornment>{prefix}</InputBaseAdornment>}\n      <InputBaseControl>\n        <InputBaseInput\n          inputMode=\"decimal\"\n          type=\"text\"\n          disabled={disabled}\n          value={displayValue}\n          onChange={(e) => {\n            let raw = e.target.value.replace(/,/g, \"\");\n            if (!allowDecimals) raw = raw.replace(/\\./g, \"\");\n            if (maxLength) raw = raw.slice(0, maxLength);\n            if (/^\\d*\\.?\\d*$/.test(raw)) onChange(raw);\n          }}\n        />\n      </InputBaseControl>\n    </InputBase>\n  );\n};\n",
      "type": "registry:component",
      "target": "src/registry-components/currency-field/component.tsx"
    },
    {
      "path": "registry/currency-field/field.tsx",
      "content": "import { CurrencyInput } from \"./component\";\nimport { createCurrencySchema } from \"./schema\";\nimport {\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useFormContext } from \"react-hook-form\";\n\ninterface CurrencyFieldProps {\n  name: string;\n  required?: boolean;\n  min?: number;\n  max?: number;\n  allowDecimals?: boolean;\n  prefix?: React.ReactNode;\n  errorMessages?: {\n    required?: string;\n    invalid?: string;\n    min?: string;\n    max?: string;\n  };\n  label?: string;\n  className?: string;\n}\n\nexport const CurrencyField = ({\n  name,\n  required,\n  min,\n  max,\n  allowDecimals = true,\n  prefix,\n  errorMessages,\n  label,\n  className,\n}: CurrencyFieldProps) => {\n  const form = useFormContext();\n\n  const schema = createCurrencySchema({\n    required,\n    min,\n    max,\n    allowDecimals,\n    errorMessages,\n  });\n\n  return (\n    <FormField\n      control={form.control}\n      name={name}\n      rules={{\n        validate: (val) => {\n          const result = schema.safeParse(val);\n          return result.success || result.error.errors[0]?.message;\n        },\n      }}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel className=\"!text-foreground\">\n            {label} {required && <span className=\"text-red-500\">*</span>}\n          </FormLabel>\n          <FormControl>\n            <CurrencyInput\n              {...field}\n              prefix={prefix}\n              allowDecimals={allowDecimals}\n              className={className}\n            />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n",
      "type": "registry:component",
      "target": "src/registry-components/currency-field/field.tsx"
    },
    {
      "path": "registry/currency-field/schema.ts",
      "content": "import { z } from \"zod\";\n\n/**\n * Options for creating a currency validation schema\n */\ninterface CurrencySchemaOptions {\n  required?: boolean;\n  min?: number;\n  max?: number;\n  allowDecimals?: boolean;\n  allowNegative?: boolean;\n  errorMessages?: {\n    required?: string;\n    invalid?: string;\n    min?: string;\n    max?: string;\n  };\n}\n\n/**\n * Creates a Zod schema for currency validation\n */\nexport const createCurrencySchema = ({\n  required = true,\n  min,\n  max,\n  allowDecimals = true,\n  allowNegative = false,\n  errorMessages = {},\n}: CurrencySchemaOptions = {}) => {\n  // Create regex pattern\n  const pattern = allowDecimals\n    ? new RegExp(`^${allowNegative ? \"-?\" : \"\"}\\\\d+(\\\\.\\\\d{1,2})?$`)\n    : new RegExp(`^${allowNegative ? \"-?\" : \"\"}\\\\d+$`);\n\n  return z.preprocess(\n    (val) => {\n      if (val === null || val === undefined) return null;\n      const str = String(val).trim();\n      if (!str) return null;\n      return pattern.test(str) ? Number(str) : null;\n    },\n    z\n      .number({\n        invalid_type_error: errorMessages.invalid ?? \"Invalid currency format\",\n      })\n      .nullable()\n      .refine(\n        (val) => {\n          if (!required && val === null) return true;\n          return val !== null;\n        },\n        {\n          message: errorMessages.required ?? \"Required\",\n        }\n      )\n      .refine(\n        (val) => {\n          if (val === null) return true;\n          if (min !== undefined && val < min) return false;\n          if (max !== undefined && val > max) return false;\n          return true;\n        },\n        {\n          message:\n            min !== undefined && max !== undefined\n              ? `Value must be between ${min} and ${max}`\n              : min !== undefined\n              ? `Must be greater than or equal to ${min}`\n              : max !== undefined\n              ? `Must be less than or equal to ${max}`\n              : \"Invalid value\",\n        }\n      )\n  );\n};\n",
      "type": "registry:hook",
      "target": "src/registry-components/currency-field/schema.ts"
    }
  ]
}