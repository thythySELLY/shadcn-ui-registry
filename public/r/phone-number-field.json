{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "phone-number-field",
  "type": "registry:block",
  "title": "Phone Number Field",
  "description": "A phone number input component with validation and formatting",
  "files": [
    {
      "path": "registry/phone-number-field/component.tsx",
      "content": "import {\n  InputBase,\n  InputBaseAdornment,\n  InputBaseControl,\n  InputBaseInput,\n} from \"@/components/ui/input-base\";\nimport { useMemo } from \"react\";\n\ninterface PhoneNumberInputProps {\n  value?: string;\n  onChange: (val: string) => void;\n  disabled?: boolean;\n  prefix?: React.ReactNode;\n  placeholder?: string;\n  limitLength?: number;\n}\n\nexport const PhoneNumberInput = ({\n  value,\n  onChange,\n  disabled,\n  prefix,\n  placeholder,\n  limitLength,\n}: PhoneNumberInputProps) => {\n  const displayValue = useMemo(() => {\n    if (!value) return \"\";\n    const cleaned = value.replace(/\\D/g, \"\");\n\n    // Handle local format (starting with 0)\n    if (value.startsWith(\"0\")) {\n      const match = cleaned.match(/^(\\d{4})(\\d{3})(\\d{3})$/);\n      if (match) {\n        return `${match[1]} ${match[2]} ${match[3]}`;\n      }\n    }\n\n    // Handle international format\n    const match = cleaned.match(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/);\n    if (match) {\n      return `+${match[1]} ${match[2]} ${match[3]} ${match[4]}`;\n    }\n    return value;\n  }, [value]);\n\n  return (\n    <InputBase>\n      {prefix && <InputBaseAdornment>{prefix}</InputBaseAdornment>}\n      <InputBaseControl>\n        <InputBaseInput\n          inputMode=\"tel\"\n          type=\"tel\"\n          disabled={disabled}\n          value={displayValue}\n          onChange={(e) => {\n            const raw = e.target.value.replace(/[^\\d+]/g, \"\");\n            // Allow only valid patterns and limit length\n            if (raw.startsWith(\"+\")) {\n              if (/^\\+?\\d*$/.test(raw) && raw.length <= 15) onChange(raw);\n            } else if (raw.startsWith(\"0\")) {\n              if (/^0\\d*$/.test(raw) && raw.length <= 10) onChange(raw);\n            } else if (raw === \"\") {\n              onChange(raw);\n            }\n          }}\n          placeholder={placeholder}\n          maxLength={limitLength}\n        />\n      </InputBaseControl>\n    </InputBase>\n  );\n};\n",
      "type": "registry:component",
      "target": "src/registry-components/phone-number-field/component.tsx"
    },
    {
      "path": "registry/phone-number-field/field.tsx",
      "content": "import { useFormContext } from \"react-hook-form\";\nimport { PhoneNumberInput } from \"./component\";\nimport { createPhoneNumberSchema } from \"./schema\";\nimport {\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\n\ninterface PhoneNumberFieldProps {\n  name: string;\n  required?: boolean;\n  errorMessages?: {\n    required?: string;\n    invalid?: string;\n    length?: string;\n  };\n  prefix?: React.ReactNode;\n  placeholder?: string;\n  limitLength?: number;\n  label?: string;\n}\n\nexport const PhoneNumberField = ({\n  name,\n  required,\n  errorMessages,\n  prefix,\n  placeholder,\n  limitLength,\n  label,\n}: PhoneNumberFieldProps) => {\n  const form = useFormContext();\n\n  const schema = createPhoneNumberSchema({\n    required,\n    errorMessages,\n    limitLength,\n  });\n\n  return (\n    <FormField\n      control={form.control}\n      name={name}\n      rules={{\n        validate: (val) => {\n          const result = schema.safeParse(val);\n          return result.success || result.error.errors[0]?.message;\n        },\n      }}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel className=\"!text-foreground\">\n            {label} {required && <span className=\"text-red-500\">*</span>}\n          </FormLabel>\n          <FormControl>\n            <PhoneNumberInput\n              {...field}\n              prefix={prefix}\n              placeholder={placeholder}\n              limitLength={limitLength}\n            />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n",
      "type": "registry:component",
      "target": "src/registry-components/phone-number-field/field.tsx"
    },
    {
      "path": "registry/phone-number-field/schema.ts",
      "content": "import { z } from \"zod\";\n\ninterface PhoneNumberSchemaOptions {\n  required?: boolean;\n  errorMessages?: {\n    required?: string;\n    invalid?: string;\n    length?: string;\n  };\n  limitLength?: number;\n}\n\nexport const createPhoneNumberSchema = ({\n  required = true,\n  errorMessages = {},\n  limitLength,\n}: PhoneNumberSchemaOptions = {}) => {\n  // Two patterns: international (+XX...) or local (0...)\n  const internationalPattern = /^\\+[1-9]\\d{1,14}$/;\n  const localPattern = /^0\\d{9}$/;\n\n  return z.preprocess(\n    (val) => {\n      if (val === null || val === undefined) return null;\n      const str = String(val)\n        .trim()\n        .replace(/[-()\\s]/g, \"\");\n      if (!str) return null;\n      return internationalPattern.test(str) || localPattern.test(str)\n        ? str\n        : null;\n    },\n    z\n      .string({\n        invalid_type_error:\n          errorMessages.invalid ?? \"Invalid phone number format\",\n      })\n      .nullable()\n      .refine(\n        (val) => {\n          if (!required && val === null) return true;\n          if (val === null) return false;\n          if (val.startsWith(\"+\")) {\n            return val.length <= (limitLength ?? 15);\n          } else {\n            return val.length === (limitLength ?? 10);\n          }\n        },\n        {\n          message: required\n            ? errorMessages.required ?? \"Phone number is required\"\n            : errorMessages.invalid ?? \"Invalid phone number\",\n        }\n      )\n  );\n};\n",
      "type": "registry:hook",
      "target": "src/registry-components/phone-number-field/schema.ts"
    }
  ]
}